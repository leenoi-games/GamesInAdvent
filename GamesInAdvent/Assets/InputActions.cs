//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""BrickBreaker"",
            ""id"": ""b0a40f98-bd36-428d-b437-b7104deb3332"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""4bf9b7fc-1cbf-47b1-930e-fd1189bdd125"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""197b66b5-8fed-4858-ae41-14a59a8da499"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""35e3356c-304d-4d6f-b62d-20cf58a97c38"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f8899b5a-bb02-4321-8fa0-2163ac73c74f"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""FlappyBird"",
            ""id"": ""4b1d9796-528d-4ad4-a470-387c1d4f5e4e"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""fcfa3282-2215-4e13-ab76-9bfe4a6fbd0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ea485d32-b7b6-4548-82b1-8d0bc2905e74"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BrickBreaker
        m_BrickBreaker = asset.FindActionMap("BrickBreaker", throwIfNotFound: true);
        m_BrickBreaker_Move = m_BrickBreaker.FindAction("Move", throwIfNotFound: true);
        // FlappyBird
        m_FlappyBird = asset.FindActionMap("FlappyBird", throwIfNotFound: true);
        m_FlappyBird_Jump = m_FlappyBird.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BrickBreaker
    private readonly InputActionMap m_BrickBreaker;
    private List<IBrickBreakerActions> m_BrickBreakerActionsCallbackInterfaces = new List<IBrickBreakerActions>();
    private readonly InputAction m_BrickBreaker_Move;
    public struct BrickBreakerActions
    {
        private @InputActions m_Wrapper;
        public BrickBreakerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_BrickBreaker_Move;
        public InputActionMap Get() { return m_Wrapper.m_BrickBreaker; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BrickBreakerActions set) { return set.Get(); }
        public void AddCallbacks(IBrickBreakerActions instance)
        {
            if (instance == null || m_Wrapper.m_BrickBreakerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BrickBreakerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IBrickBreakerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IBrickBreakerActions instance)
        {
            if (m_Wrapper.m_BrickBreakerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBrickBreakerActions instance)
        {
            foreach (var item in m_Wrapper.m_BrickBreakerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BrickBreakerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BrickBreakerActions @BrickBreaker => new BrickBreakerActions(this);

    // FlappyBird
    private readonly InputActionMap m_FlappyBird;
    private List<IFlappyBirdActions> m_FlappyBirdActionsCallbackInterfaces = new List<IFlappyBirdActions>();
    private readonly InputAction m_FlappyBird_Jump;
    public struct FlappyBirdActions
    {
        private @InputActions m_Wrapper;
        public FlappyBirdActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_FlappyBird_Jump;
        public InputActionMap Get() { return m_Wrapper.m_FlappyBird; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlappyBirdActions set) { return set.Get(); }
        public void AddCallbacks(IFlappyBirdActions instance)
        {
            if (instance == null || m_Wrapper.m_FlappyBirdActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlappyBirdActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IFlappyBirdActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IFlappyBirdActions instance)
        {
            if (m_Wrapper.m_FlappyBirdActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlappyBirdActions instance)
        {
            foreach (var item in m_Wrapper.m_FlappyBirdActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlappyBirdActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlappyBirdActions @FlappyBird => new FlappyBirdActions(this);
    public interface IBrickBreakerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IFlappyBirdActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
}
