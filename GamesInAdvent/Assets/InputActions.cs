//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""BrickBreaker"",
            ""id"": ""b0a40f98-bd36-428d-b437-b7104deb3332"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""4bf9b7fc-1cbf-47b1-930e-fd1189bdd125"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""197b66b5-8fed-4858-ae41-14a59a8da499"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""35e3356c-304d-4d6f-b62d-20cf58a97c38"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f8899b5a-bb02-4321-8fa0-2163ac73c74f"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""FlappyBird"",
            ""id"": ""4b1d9796-528d-4ad4-a470-387c1d4f5e4e"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""fcfa3282-2215-4e13-ab76-9bfe4a6fbd0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ea485d32-b7b6-4548-82b1-8d0bc2905e74"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DoodleJump"",
            ""id"": ""97c36745-e316-4475-addd-4f5b98fae2be"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""18a7ce36-8cf3-43f9-acab-e7eac843b033"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""be40162f-a8d1-47d3-b59c-3ceddd3404d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""49483bce-6327-428d-bc90-ba7a53429344"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""549edf34-9e7c-45cf-b159-78c2b807ca75"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f73ccadf-93f3-49c2-bc61-6ab4e435ff66"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0f401190-ff9b-43f5-9afc-8699d7dfb5d3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Frogger"",
            ""id"": ""53c1dec0-4283-4923-acf2-cb2f2bbde5dc"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a54dbbbf-92b9-4846-826f-d09f48f70b93"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""00378cea-77ef-4040-ba8b-00b1cfb4b95e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8af3d8d0-f480-4333-a958-488303234100"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""07aed888-37e4-4a69-b699-2f397037c7af"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6e158eeb-4357-4858-a666-909a25e13fe5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eb42ff97-df5a-46c5-9af2-da93476c122c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Sneak"",
            ""id"": ""148eee4e-0423-4500-b4e0-ff3e4a311c08"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""43cc4ea4-8003-4ead-a29b-8249a531d516"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""05fb7aa9-2884-465e-8b9f-d408c1dcebda"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""abf7707b-9f87-4929-8723-f5a3203a9bf5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""38ce6971-9a0d-4eb2-ae93-40917e3734c1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5b29cf56-4815-4242-a334-90d581f5b837"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""88aebae0-57f8-4bc3-9908-07acbe3bbaba"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Jetpack"",
            ""id"": ""13e39266-17fe-47a4-af45-f92af2810298"",
            ""actions"": [
                {
                    ""name"": ""Fly"",
                    ""type"": ""Value"",
                    ""id"": ""9cb43c2d-0d07-4c4b-9431-1cb82789ffca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1.401298E-45,pressPoint=1.401298E-45)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a1c3231-49b8-4c07-9ec9-09ddfa5f2b2a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BrickBreaker
        m_BrickBreaker = asset.FindActionMap("BrickBreaker", throwIfNotFound: true);
        m_BrickBreaker_Move = m_BrickBreaker.FindAction("Move", throwIfNotFound: true);
        // FlappyBird
        m_FlappyBird = asset.FindActionMap("FlappyBird", throwIfNotFound: true);
        m_FlappyBird_Jump = m_FlappyBird.FindAction("Jump", throwIfNotFound: true);
        // DoodleJump
        m_DoodleJump = asset.FindActionMap("DoodleJump", throwIfNotFound: true);
        m_DoodleJump_Shoot = m_DoodleJump.FindAction("Shoot", throwIfNotFound: true);
        m_DoodleJump_Move = m_DoodleJump.FindAction("Move", throwIfNotFound: true);
        // Frogger
        m_Frogger = asset.FindActionMap("Frogger", throwIfNotFound: true);
        m_Frogger_Move = m_Frogger.FindAction("Move", throwIfNotFound: true);
        // Sneak
        m_Sneak = asset.FindActionMap("Sneak", throwIfNotFound: true);
        m_Sneak_Move = m_Sneak.FindAction("Move", throwIfNotFound: true);
        // Jetpack
        m_Jetpack = asset.FindActionMap("Jetpack", throwIfNotFound: true);
        m_Jetpack_Fly = m_Jetpack.FindAction("Fly", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BrickBreaker
    private readonly InputActionMap m_BrickBreaker;
    private List<IBrickBreakerActions> m_BrickBreakerActionsCallbackInterfaces = new List<IBrickBreakerActions>();
    private readonly InputAction m_BrickBreaker_Move;
    public struct BrickBreakerActions
    {
        private @InputActions m_Wrapper;
        public BrickBreakerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_BrickBreaker_Move;
        public InputActionMap Get() { return m_Wrapper.m_BrickBreaker; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BrickBreakerActions set) { return set.Get(); }
        public void AddCallbacks(IBrickBreakerActions instance)
        {
            if (instance == null || m_Wrapper.m_BrickBreakerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BrickBreakerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IBrickBreakerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IBrickBreakerActions instance)
        {
            if (m_Wrapper.m_BrickBreakerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBrickBreakerActions instance)
        {
            foreach (var item in m_Wrapper.m_BrickBreakerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BrickBreakerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BrickBreakerActions @BrickBreaker => new BrickBreakerActions(this);

    // FlappyBird
    private readonly InputActionMap m_FlappyBird;
    private List<IFlappyBirdActions> m_FlappyBirdActionsCallbackInterfaces = new List<IFlappyBirdActions>();
    private readonly InputAction m_FlappyBird_Jump;
    public struct FlappyBirdActions
    {
        private @InputActions m_Wrapper;
        public FlappyBirdActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_FlappyBird_Jump;
        public InputActionMap Get() { return m_Wrapper.m_FlappyBird; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlappyBirdActions set) { return set.Get(); }
        public void AddCallbacks(IFlappyBirdActions instance)
        {
            if (instance == null || m_Wrapper.m_FlappyBirdActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlappyBirdActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IFlappyBirdActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IFlappyBirdActions instance)
        {
            if (m_Wrapper.m_FlappyBirdActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlappyBirdActions instance)
        {
            foreach (var item in m_Wrapper.m_FlappyBirdActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlappyBirdActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlappyBirdActions @FlappyBird => new FlappyBirdActions(this);

    // DoodleJump
    private readonly InputActionMap m_DoodleJump;
    private List<IDoodleJumpActions> m_DoodleJumpActionsCallbackInterfaces = new List<IDoodleJumpActions>();
    private readonly InputAction m_DoodleJump_Shoot;
    private readonly InputAction m_DoodleJump_Move;
    public struct DoodleJumpActions
    {
        private @InputActions m_Wrapper;
        public DoodleJumpActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_DoodleJump_Shoot;
        public InputAction @Move => m_Wrapper.m_DoodleJump_Move;
        public InputActionMap Get() { return m_Wrapper.m_DoodleJump; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DoodleJumpActions set) { return set.Get(); }
        public void AddCallbacks(IDoodleJumpActions instance)
        {
            if (instance == null || m_Wrapper.m_DoodleJumpActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DoodleJumpActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IDoodleJumpActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IDoodleJumpActions instance)
        {
            if (m_Wrapper.m_DoodleJumpActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDoodleJumpActions instance)
        {
            foreach (var item in m_Wrapper.m_DoodleJumpActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DoodleJumpActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DoodleJumpActions @DoodleJump => new DoodleJumpActions(this);

    // Frogger
    private readonly InputActionMap m_Frogger;
    private List<IFroggerActions> m_FroggerActionsCallbackInterfaces = new List<IFroggerActions>();
    private readonly InputAction m_Frogger_Move;
    public struct FroggerActions
    {
        private @InputActions m_Wrapper;
        public FroggerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Frogger_Move;
        public InputActionMap Get() { return m_Wrapper.m_Frogger; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FroggerActions set) { return set.Get(); }
        public void AddCallbacks(IFroggerActions instance)
        {
            if (instance == null || m_Wrapper.m_FroggerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FroggerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IFroggerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IFroggerActions instance)
        {
            if (m_Wrapper.m_FroggerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFroggerActions instance)
        {
            foreach (var item in m_Wrapper.m_FroggerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FroggerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FroggerActions @Frogger => new FroggerActions(this);

    // Sneak
    private readonly InputActionMap m_Sneak;
    private List<ISneakActions> m_SneakActionsCallbackInterfaces = new List<ISneakActions>();
    private readonly InputAction m_Sneak_Move;
    public struct SneakActions
    {
        private @InputActions m_Wrapper;
        public SneakActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Sneak_Move;
        public InputActionMap Get() { return m_Wrapper.m_Sneak; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SneakActions set) { return set.Get(); }
        public void AddCallbacks(ISneakActions instance)
        {
            if (instance == null || m_Wrapper.m_SneakActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SneakActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ISneakActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ISneakActions instance)
        {
            if (m_Wrapper.m_SneakActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISneakActions instance)
        {
            foreach (var item in m_Wrapper.m_SneakActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SneakActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SneakActions @Sneak => new SneakActions(this);

    // Jetpack
    private readonly InputActionMap m_Jetpack;
    private List<IJetpackActions> m_JetpackActionsCallbackInterfaces = new List<IJetpackActions>();
    private readonly InputAction m_Jetpack_Fly;
    public struct JetpackActions
    {
        private @InputActions m_Wrapper;
        public JetpackActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fly => m_Wrapper.m_Jetpack_Fly;
        public InputActionMap Get() { return m_Wrapper.m_Jetpack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JetpackActions set) { return set.Get(); }
        public void AddCallbacks(IJetpackActions instance)
        {
            if (instance == null || m_Wrapper.m_JetpackActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JetpackActionsCallbackInterfaces.Add(instance);
            @Fly.started += instance.OnFly;
            @Fly.performed += instance.OnFly;
            @Fly.canceled += instance.OnFly;
        }

        private void UnregisterCallbacks(IJetpackActions instance)
        {
            @Fly.started -= instance.OnFly;
            @Fly.performed -= instance.OnFly;
            @Fly.canceled -= instance.OnFly;
        }

        public void RemoveCallbacks(IJetpackActions instance)
        {
            if (m_Wrapper.m_JetpackActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJetpackActions instance)
        {
            foreach (var item in m_Wrapper.m_JetpackActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JetpackActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JetpackActions @Jetpack => new JetpackActions(this);
    public interface IBrickBreakerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IFlappyBirdActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IDoodleJumpActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IFroggerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ISneakActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IJetpackActions
    {
        void OnFly(InputAction.CallbackContext context);
    }
}
